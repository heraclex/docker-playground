version: '3.1'

# For airflow-common settings
x-airflow-common:
  &airflow-common
  # image: apache/airflow:2.7.3
  image: local/airflow
  profiles: ["airflow"]
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    # For backward compatibility, with Airflow <2.3
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth'
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
  volumes:
    - ./.storage/airflow/dags:/opt/airflow/dags
    - ./.storage/airflow/logs:/opt/airflow/logs
    - ./.storage/airflow/plugins:/opt/airflow/plugins
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    &airflow-common-depends-on
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy


services:

  centos7:
    build:
      context: ./centos7
      dockerfile: Dockerfile
    image: local/centos7
    container_name: centos7
    volumes:
      - ./.shared:/root/shared
  
  centos8:
    build:
      context: ./centos8
      dockerfile: Dockerfile
    image: local/centos8
    container_name: centos8
    volumes:
      - ./.shared:/root/shared

  postgres:
    build:
      context: ./postgres
      dockerfile: Dockerfile
    container_name: postgres
    hostname: postgres-db # host name in virtual private network inside docker (used to connect from other service)
    image: local/postgres:latest
    environment:
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres
        POSTGRES_DB: postgres
        # METABASE_DB_USER: metabase
        # METABASE_DB_PASS: metabase
        # METABASE_DB_NAME: metabase
        # AIRFLOW_DB_USER: airflow
        # AIRFLOW_DB_PASS: airflow
        # AIRFLOW_DB_NAME: airflow
    ports:
      - '5432:5432'
    volumes:
      - ./.storage/postgres/data:/var/lib/postgresql/data
    command: ["postgres", "-c", "log_statement=all"]
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    privileged: true

  metabase:
    container_name: metabase
    image: local/metabase:v0.45.2-databricks
    restart: always
    ports:
      - '3001:3000'
    volumes:
      # declare your mount volume /host/dir:/container/dir
      - ./.storage/metabase:/metabase-data
    environment:
      MB_DB_TYPE: postgres
      MB_DB_DBNAME: metabase
      MB_DB_PORT: 5432
      MB_DB_USER: metabase
      MB_DB_PASS: metabase
      MB_DB_HOST: postgres-db
    depends_on:
      - postgres
    links:
      - postgres

  hive:
    build:
      context: ./hive
      dockerfile: Dockerfile
    container_name: hive
    image: local/hive
    profiles: ["hive"]
    ports:
      - '9083:9083'      
    depends_on:
      - postgres
      - minio

  minio:
    build:
      context: ./minio
      dockerfile: Dockerfile
    container_name: minio
    image: local/minio
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio123
    ports:
      - '9000:9000'
      - "9001:9001"
    volumes:
      - ./.storage/minio:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://minio:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
  
  superset:
    # image: arezamoosavi/superset:latest
    # image: apache/superset:latest
    build:
      context: ./superset
      dockerfile: Dockerfile
    image: local/superset:2.1.0
    container_name: superset
    env_file: ./superset/.env-non-dev
    # environment:
    #   SUPERSET_SECRET_KEY: thisismysecretkey
    #   # SQLALCHEMY_DATABASE_URI: 'sqlite:////superset/superset.db'
    #   SQLALCHEMY_DATABASE_URI: 'postgresql+psycopg2://superset:superset@127.0.0.1:5432/superset'
    #   SUPERSET__SQLALCHEMY_DATABASE_URI: 'postgresql+psycopg2://superset:superset@127.0.0.1:5432/superset'
    #   WTF_CSRF_ENABLED: True
    #   # WTF_CSRF_EXEMPT_LIST: Null
    #   MAPBOX_API_KEY: ''
    ports:
      - 8088:8088
    volumes:
      - ./.storage/superset:/superset
    # restart: unless-stopped
    depends_on:
      - postgres
    links:
      - postgres

  ### Airflow ###

  ### Airflow ###

  redis:
    image: redis:latest
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 50
    restart: always

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    # yamllint disable rule:line-length
    command:
      - -c
      - |
        function ver() {
          printf "%04d%04d%04d%04d" $${1//./ }
        }
        airflow_version=$$(AIRFLOW__LOGGING__LOGGING_LEVEL=INFO && gosu airflow airflow version)
        airflow_version_comparable=$$(ver $${airflow_version})
        min_airflow_version=2.2.0
        min_airflow_version_comparable=$$(ver $${min_airflow_version})
        if (( airflow_version_comparable < min_airflow_version_comparable )); then
          echo
          echo -e "\033[1;31mERROR!!!: Too old Airflow version $${airflow_version}!\e[0m"
          echo "The minimum Airflow version supported: $${min_airflow_version}. Only use this or higher!"
          echo
          exit 1
        fi
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/start/docker.html#setting-the-right-airflow-user"
          echo
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/start/docker.html#before-you-begin"
          echo
        fi
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version
    # yamllint enable rule:line-length
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    user: "0:0"
    volumes:
      - .:/sources

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - 8000:8000
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
  
  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"']
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-worker:
    <<: *airflow-common
    command: celery worker
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 10s
      timeout: 10s
      retries: 5
    environment:
      <<: *airflow-common-env
      # Required to handle warm shutdown of the celery workers properly
      # See https://airflow.apache.org/docs/docker-stack/entrypoint.html#signal-propagation
      DUMB_INIT_SETSID: "0"
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  ### SPARK and TRINO ###

  spark-master:
    container_name: spark-master
    image: local/spark:3.5.1
    build:
      context: ./spark
      dockerfile: Dockerfile
    # restart: unless-stopped
    ports:
      # - 4040:4040
      - 7077:7077
      - 8080:8080
      # - 18080:18080 
    command: sh entrypoint.sh master

  spark-worker-1:
    build:
      context: ./spark
      dockerfile: Dockerfile
    container_name: spark-worker-1
    image: local/spark:3.5.1
    # restart: unless-stopped
    ports:
      # - "8081-8085:8081"
      - 8081:8081
    command: sh entrypoint.sh worker
    depends_on:
      - spark-master
  
  spark-worker-2:
    build:
      context: ./spark
      dockerfile: Dockerfile
    container_name: spark-worker-2
    image: local/spark:3.5.1
    # restart: unless-stopped
    ports:
      # - "8081-8085:8081"
      - 8082:8081
    command: sh entrypoint.sh worker
    depends_on:
      - spark-master
  
  spark-history:
    build:
      context: ./spark
      dockerfile: Dockerfile
    container_name: spark-history
    image: local/spark:3.5.1
    # restart: unless-stopped
    ports:
      # - "8081-8085:8081"
      - 18080:18080
    command: sh entrypoint.sh history
    depends_on:
      - spark-master

  trino-coordinator:
    container_name: trino-coordinator
    image: local/trino
    build:
      context: ./trino
      dockerfile: Dockerfile
    ports:
      - "8888:8888"
    volumes:
      - ./trino/coordinator_config.properties:/usr/trino/etc/config.properties
      - ./trino/etc/catalog:/usr/trino/etc/catalog

  trino-worker:
    container_name: trino-worker
    image: local/trino
    build:
      context: ./trino
      dockerfile: Dockerfile
    volumes:
      - ./trino/worker_config.properties:/usr/trino/etc/config.properties
      - ./trino/etc/catalog:/usr/trino/etc/catalog
